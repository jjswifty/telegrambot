import { sendMessageSafe, getPreparedWeatherInfo, sendDice } from './utils/messageUtils';
import { weatherApi, geocoderApi } from './api';
import TelegramBotAPI from 'node-telegram-bot-api'
import texts from './data/texts'
import { store } from './store';

const token = process.env.token as string

export const bot = new TelegramBotAPI(token, { polling: true })

bot.setMyCommands([
    { command: '/start', description: '–°—Ç–∞—Ä—Ç—É–µ–º...' },
    { command: '/commands', description: '–ß—Ç–æ —è –º–æ–≥—É.' },
    { command: '/weather', description: '–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.' },
    { command: '/roll', description: '–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫.' }
])

const start = () => {

    bot.on('polling_error', error => console.log(error))

    const getWeather = async (latitude: number, longitude: number) => {
        return await weatherApi.getWeatherFromCoordinates(latitude, longitude)
    }

    const getLocation = async (latitude: number, longitude: number) => {
        return await geocoderApi.geocodeByCoordinates(latitude, longitude)
    }

    bot.on('callback_query', async msg => {
        if (msg.data === 'reroll_dice') {
            sendDice()
        }
    })
    

    bot.on('message', async msg => {

        const dispatch = store.dispatch
        //const chatId = store.get().chatId

        dispatch('chatInfo/set/chatInfo', {
            chatId: msg.chat.id as number,
            fromId: msg.from?.id as number,
            messageId: msg.message_id as number
        })

        const chatId = store.get().chatId
        const msgText = msg.text as string
        const fromId = msg.from?.id as number
        const userFirstName = msg.from?.first_name
        const messageId = msg.message_id as number

        if (msgText === '/start') {
            return sendMessageSafe('–Ø - –æ—á–µ—Ä–µ–¥–Ω–æ–π –±–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –Ω–∞ Node.js —Ä–∞–¥–∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å—è–∫–æ–π —Ñ–∏–≥–Ω–∏. –ß–µ–∫–∞–π –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã)')
        }

        if (msgText === '/commands') {
            return sendMessageSafe(
                "üåï /weather - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ —Å–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ. –ü—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞ \n" +
                "üîß /commands - –ø–æ–ª—É—á–∏—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥. \n" +
                "–¢–∞–∫ –∂–µ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (–º–µ—Ç–∫—É) –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –ø–æ –Ω–µ–π."
            )
        }

        if (msgText === '/imidiot') {
            return sendMessageSafe(texts[Math.ceil((Math.random() * texts.length + 1))])
        }

        if (msgText?.includes('/weather')) {
            const splittedMessage = msgText.split(' ')

            if (splittedMessage.length > 2) {
                return sendMessageSafe('–ù–∞–ø–∏—à–∏ —Ä–æ–≤–Ω–æ 1 —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞')
            }

            if (splittedMessage.length > 1) {
                const coordinates = await geocoderApi.geocodeByCityName(splittedMessage[splittedMessage.length - 1])

                if (!coordinates) {
                    return sendMessageSafe('–¢—ã –≤ –∫–∞–∫–∏—Ö-—Ç–æ –µ–±–µ–Ω—è—Ö, –ª–∏–±–æ –ø–∏—à–µ—à—å —Ö–µ—Ä–Ω—é. Stop it. Get some help.')
                }

                const { latitude, longitude } = coordinates
                const { location } = await getLocation(latitude, longitude)
                const { weatherNow, cityInfo, forecast } = await getWeather(latitude, longitude)

                dispatch('weatherInfo/set/userLocation', {
                    location,
                    latitude,
                    longitude
                })

                dispatch('weatherInfo/set/weather', {
                    ...weatherNow,
                    tzinfo: cityInfo.tzinfo.name
                })

                return sendMessageSafe(getPreparedWeatherInfo())
            }
            return sendMessageSafe('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–≥–µ–æ–ª–æ–∫–∞—Ü–∏—é), –ª–∏–±–æ –Ω–∞–ø–∏—à–∏ /weather —Ç–≤–æ–π –≥–æ—Ä–æ–¥.')
        }

        if (msg.location) {
            const { weatherNow, cityInfo, forecast } = await getWeather(msg.location.latitude, msg.location.longitude)
            const { location } = await getLocation(msg.location.latitude, msg.location.longitude)

            dispatch('weatherInfo/set/userLocation', {
                location,
                latitude: msg.location.latitude,
                longitude: msg.location.longitude
            })

            dispatch('weatherInfo/set/weather', {
                ...weatherNow,
                tzinfo: cityInfo.tzinfo.name
            })

            return sendMessageSafe(getPreparedWeatherInfo())
        }

        if (msgText === '/roll') {
            return sendDice()
        }

        return sendMessageSafe(Math.random() > 0.5 ?
            `–ß–µ –∑–∞ —Ö—Ä–µ–Ω—å, ${msg.from?.first_name}. –Ø –Ω–µ –ø–æ–Ω—è–ª. –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —á–µ–∫–∞–π.`
            : `–ß–µ –Ω–µ—Å–µ—à—å, ${msg.from?.first_name}? –ù–∞–ø–∏—à–∏ —á—Ç–æ-—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ, —á–µ–∫–Ω–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.`
            , { disable_notification: true }
        )
    })
}

start()